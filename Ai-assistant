
import pyttsx3  # Text-to-speech
import speech_recognition as sr  # Speech recognition
import datetime  # Date and time
import wikipedia  # Wikipedia search
import webbrowser  # Open web pages
import os  # System operations
import smtplib  # Sending emails
import subprocess  # Running system commands
import pyautogui  # Automate keyboard/mouse actions
import time  # Time functions
import ctypes  # Lock PC

# Initialize the speech engine
engine = pyttsx3.init()

# Function to make the assistant speak
def speak(audio):
    print(f"Assistant: {audio}")
    engine.say(audio)
    engine.runAndWait()

# Function to greet the user
def greet_user():
    hour = datetime.datetime.now().hour
    if 0 <= hour < 12:
        speak("Good morning!")
    elif 12 <= hour < 18:
        speak("Good afternoon!")
    else:
        speak("Good evening!")
    speak("I am your AI assistant. How can I assist you today?")

# Function to take a voice command
def take_command():
    recognizer = sr.Recognizer()
    with sr.Microphone() as source:
        print("Listening...")
        recognizer.adjust_for_ambient_noise(source)
        recognizer.pause_threshold = 1
        audio = recognizer.listen(source)
    try:
        print("Recognizing...")
        query = recognizer.recognize_google(audio, language='en-in')
        print(f"User said: {query}")
        return query.lower()
    except sr.UnknownValueError:
        speak("Sorry, I couldn't understand. Please repeat.")
        return "None"
    except sr.RequestError:
        speak("Speech service is not responding.")
        return "None"

# Function to send an email
def send_email(to, content):
    try:
        server = smtplib.SMTP('smtp.gmail.com', 587)
        server.starttls()
        server.login('your-email@gmail.com', 'your-password')
        server.sendmail('your-email@gmail.com', to, content)
        server.close()
        speak("Email has been sent.")
    except Exception as e:
        speak("Sorry, I am unable to send the email.")

# Function to perform system commands
def system_control(query):
    if 'shutdown' in query:
        speak("Shutting down the system.")
        os.system("shutdown /s /t 5")
    elif 'restart' in query:
        speak("Restarting the system.")
        os.system("shutdown /r /t 5")
    elif 'lock' in query:
        speak("Locking the system.")
        ctypes.windll.user32.LockWorkStation()
    elif 'sleep' in query:
        speak("Putting the system to sleep.")
        os.system("rundll32.exe powrprof.dll,SetSuspendState 0,1,0")
    elif 'volume up' in query:
        pyautogui.press("volumeup", presses=5)
    elif 'volume down' in query:
        pyautogui.press("volumedown", presses=5)
    elif 'mute' in query:
        pyautogui.press("volumemute")

# Function to open applications dynamically
def open_application(query):
    if 'open notepad' in query:
        os.system("notepad.exe")
    elif 'open calculator' in query:
        os.system("calc.exe")
    elif 'open chrome' in query:
        os.startfile("C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe")
    elif 'open vscode' in query:
        os.startfile("C:\\Users\\YourUsername\\AppData\\Local\\Programs\\Microsoft VS Code\\Code.exe")

# Function to search Google
def google_search(query):
    search_term = query.replace("search", "")
    speak(f"Searching Google for {search_term}")
    webbrowser.open(f"https://www.google.com/search?q={search_term}")

# Function to set a reminder
def set_reminder():
    speak("What should I remind you about?")
    reminder_text = take_command()
    if reminder_text != "None":
        with open("reminders.txt", "a") as file:
            file.write(reminder_text + "\n")
        speak("Reminder saved.")

# Function to read saved reminders
def get_reminders():
    try:
        with open("reminders.txt", "r") as file:
            reminders = file.readlines()
        if reminders:
            speak("Here are your reminders:")
            for rem in reminders:
                speak(rem.strip())
        else:
            speak("You have no reminders saved.")
    except FileNotFoundError:
        speak("No reminders found.")

# Main function
def main():
    greet_user()
    while True:
        query = take_command()
        if query == "none":
            continue
        
        if 'wikipedia' in query:
            speak("Searching Wikipedia...")
            query = query.replace("wikipedia", "")
            try:
                results = wikipedia.summary(query, sentences=2)
                speak(results)
            except:
                speak("No results found.")
        elif 'open youtube' in query:
            speak("Opening YouTube")
            webbrowser.open("https://youtube.com")
        elif 'open google' in query:
            speak("Opening Google")
            webbrowser.open("https://google.com")
        elif 'play music' in query:
            music_dir = 'C:\\Users\\YourUsername\\Music'
            songs = os.listdir(music_dir)
            os.startfile(os.path.join(music_dir, songs[0]))
        elif 'the time' in query:
            speak(f"The time is {datetime.datetime.now().strftime('%H:%M:%S')}")
        elif 'email' in query:
            speak("What should I say?")
            content = take_command()
            send_email('recipient@example.com', content)
        elif any(cmd in query for cmd in ['shutdown', 'restart', 'lock', 'sleep', 'volume up', 'volume down', 'mute']):
            system_control(query)
        elif 'open' in query:
            open_application(query)
        elif 'search' in query:
            google_search(query)
        elif 'set reminder' in query:
            set_reminder()
        elif 'get reminders' in query:
            get_reminders()
        elif 'exit' in query or 'quit' in query:
            speak("Goodbye!")
            break

if __name__ == "__main__":
    main()
AI Final.py
Displaying AI Final.py.
